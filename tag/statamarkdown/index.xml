<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Statamarkdown | JA</title>
    <link>https://arnoldjulian.github.io/tag/statamarkdown/</link>
      <atom:link href="https://arnoldjulian.github.io/tag/statamarkdown/index.xml" rel="self" type="application/rss+xml" />
    <description>Statamarkdown</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 09 Jun 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://arnoldjulian.github.io/media/icon_hu0c8fc276666f55d712a037b4ddb14348_12628_512x512_fill_lanczos_center_3.png</url>
      <title>Statamarkdown</title>
      <link>https://arnoldjulian.github.io/tag/statamarkdown/</link>
    </image>
    
    <item>
      <title>Using Stata with Markdown</title>
      <link>https://arnoldjulian.github.io/post/stata-and-markdown/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://arnoldjulian.github.io/post/stata-and-markdown/</guid>
      <description>&lt;p&gt;Frequently when I am working in Stata, I find myself really missing the key features of R Markdown, like the ability to intersperse code with text and share my notes with other people in an attractive dynamic HTML or PDF document. I also find it really helpful from a workflow standpoint to be able to run code snippets in the text editor and to preview the document that I am writing in real time like you can in an R Notebook.&lt;/p&gt;
&lt;p&gt;At one point, I thought my solution would just abandon Stata entirely for R. But I find that I still need Stata for certain kinds of analysis, and for some projects there is enough inertia that it makes sense to just keep doing them in Stata.&lt;/p&gt;
&lt;p&gt;A little while back, though, I found I just couldn&amp;rsquo;t stand working in Stata&amp;rsquo;s .do file editor anymore. So I started a quest to figure out how I could best integrate Stata with Markdown in other environments. Here are some of the options I came across.&lt;/p&gt;
&lt;h2 id=&#34;hydrogen-in-atom&#34;&gt;Hydrogen in Atom&lt;/h2&gt;
&lt;p&gt;I really love this setup. Atom is such a cool text editor. You can edit almost any language or document type, the color schemes are attractive and the keyboard shortcuts really help with efficiency.&lt;/p&gt;
&lt;p&gt;The best thing about Atom is that you can use the &lt;a href=&#34;https://atom.io/packages/hydrogen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hydrogen package&lt;/a&gt; to run code interactively. You can even run code for multiple kernels/languages in the &lt;a href=&#34;https://blog.nteract.io/hydrogen-introducing-rich-multi-language-documents-b5057ff34efc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;same document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To create an interactive document with Stata, you need to install Kyle Barron&amp;rsquo;s &lt;a href=&#34;https://kylebarron.dev/stata_kernel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stata_kernel&lt;/a&gt;, the &lt;a href=&#34;https://atom.io/packages/language-stata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Language Stata&lt;/a&gt; package and the &lt;a href=&#34;https://atom.io/packages/language-markdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Language Markdown&lt;/a&gt; package. &lt;code&gt;stata_kernel&lt;/code&gt; is the Jupyter kernel for Stata that allows the code to run interactively, Language Stata provides Stata lanugage support, and Language Markdown provides support for Markdown (including R Markdown). I also installed &lt;a href=&#34;https://atom.io/packages/markdown-preview-plus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markdown Preview Plus (MPP)&lt;/a&gt;, which provides a live updated preview of your document.&lt;/p&gt;
&lt;p&gt;In case you are not familiar with Atom, each Jupyter kernel that you use is going to be installed in a slightly different way. For the &lt;code&gt;stata_kernel&lt;/code&gt;, follow the instructions that Kyle Barron provides. You install Atom packages in Atom by hitting &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt; in Windows/Linux or &lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt; in macOS and typing &lt;code&gt;install packages&lt;/code&gt; in the search field.&lt;/p&gt;
&lt;p&gt;Once you have everything set up, you will be able to intersperse your code with text, run the code interactively, and preview the resulting document like this:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://arnoldjulian.github.io/media/stata-markdown.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The only shortcoming here is that you cannot easily export the code along with the text to a shareable HTML or PDF document. For this, you can open your Markdown document in R and use the Statamarkdown package.&lt;/p&gt;
&lt;h2 id=&#34;statamarkdown-in-r&#34;&gt;Statamarkdown in R&lt;/h2&gt;
&lt;p&gt;With Doug Hemken&amp;rsquo;s &lt;a href=&#34;https://github.com/Hemken/Statamarkdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Statamarkdown&lt;/a&gt;, you can knit your .Rmd or .RMarkdown file in the usual way to create a document like an .html or .pdf or a blog post. There is a nice tutorial on how to use it &lt;a href=&#34;https://www.ssc.wisc.edu/~hemken/Stataworkshops/Stata%20and%20R%20Markdown/StataMarkdown.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the time I am writing this post, Statamarkdown is good for producing documents but &lt;a href=&#34;https://github.com/Hemken/Statamarkdown/issues/12&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;does not work&lt;/a&gt; for running code interactively in a notebook. Also, Statamarkdown does not automatically remember what code you ran from one chunk to the next. In order to run a code chunk sequentially that builds on the previous chunk, you have to enable the &lt;code&gt;collectcode = TRUE&lt;/code&gt; option. Here is what the output looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  sysuse auto, clear
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  summarize mpg weight
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  regress mpg weight
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Variable |        Obs        Mean    Std. dev.       Min        Max
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-------------+---------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         mpg |         74     21.2973    5.785503         12         41
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      weight |         74    3019.459    777.1936       1760       4840
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Source |       SS           df       MS      Number of obs   =        74
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-------------+----------------------------------   F(1, 72)        =    134.62
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       Model |   1591.9902         1   1591.9902   Prob &amp;gt; F        =    0.0000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Residual |  851.469256        72  11.8259619   R-squared       =    0.6515
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-------------+----------------------------------   Adj R-squared   =    0.6467
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       Total |  2443.45946        73  33.4720474   Root MSE        =    3.4389
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         mpg | Coefficient  Std. err.      t    P&amp;gt;|t|     [95% conf. interval]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-------------+----------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      weight |  -.0060087   .0005179   -11.60   0.000    -.0070411   -.0049763
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       _cons |   39.44028   1.614003    24.44   0.000     36.22283    42.65774
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Statamarkdown creates a bunch of .do and .log files that you have to back and clean up afterwards. Despite these limitations and minor hassles, Statamarkdown does achieve the desired objective of allowing you to produce Stata ouput in an HTML or PDF document.&lt;/p&gt;
&lt;h2 id=&#34;markstat-in-stata&#34;&gt;Markstat in Stata&lt;/h2&gt;
&lt;p&gt;Germán Rodriguez&amp;rsquo;s &lt;a href=&#34;https://data.princeton.edu/stata/markdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;markstat&lt;/a&gt; is probably the best option if you want to produce a dynamic document but stay completely in the realm of Stata. With &lt;code&gt;markstat&lt;/code&gt; you intersperse Markdown annotations with Stata code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# Stata and Markdown
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Write some Markdown-formatted text and see what happens.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## Run Stata Code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Now try running some Stata code:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  sysuse auto, clear
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  summarize mpg weight
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  regress mpg weight
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## To Do List 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;That was a great analysis. Next we will do the following:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;1.&lt;/span&gt; One thing
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;2.&lt;/span&gt; Two thing
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;3.&lt;/span&gt; Red thing
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;4.&lt;/span&gt; Blue thing
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Etc....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code gets identified with indentations rather than back ticks. You then need to save it as a script (.stmd) file and then process the file by running the &lt;code&gt;markstat&lt;/code&gt; command in Stata. You also need to have Pandoc installed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;markstat&lt;/code&gt; definitely produces attractive documents and slides and is a better solution than Statamarkdown in R if that is all you need to do.&lt;/p&gt;
&lt;h2 id=&#34;other-solutions&#34;&gt;Other Solutions&lt;/h2&gt;
&lt;p&gt;There are a few other solutions I looked at but did not end up not using.&lt;/p&gt;
&lt;p&gt;Stata is promoting its &lt;a href=&#34;https://www.stata.com/python/pystata/install.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pystata&lt;/a&gt; Python package, which allows you to run Stata in an IPython environment like Jupyter notebooks. There is also Stata&amp;rsquo;s &lt;a href=&#34;https://www.stata.com/manuals/rptdyndoc.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;dyndoc&lt;/code&gt;&lt;/a&gt; command, which converts a text file into an HTML file or Word document.&lt;/p&gt;
&lt;p&gt;I also tried using pystata in conjunction with the reticulate package in R, which I definitely do not recommend!&lt;/p&gt;
&lt;p&gt;I hope you find a Stata/Markdown solution that works for you. Let me know what you choose!&lt;/p&gt;
&lt;script src=&#34;https://utteranc.es/client.js&#34;
        repo=&#34;eteitelbaum/academic-website&#34;
        issue-term=&#34;pathname&#34;
        theme=&#34;github-light&#34;
        crossorigin=&#34;anonymous&#34;
        async&gt;
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>
